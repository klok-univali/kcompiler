/**
 * @author Gabriel Hegler Klok
 * @since 2019/08
 */
package modal;

import java.util.ArrayList;

/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
    public static Semantic semantic;
    
    public Parser(){}

    public void execute() throws ParseException {
        Token token = getNextToken();


        while(token.kind != 0){
            token = getNextToken();
        }
    }

    public Semantic syntaxAnalisys() throws ParseException {
        semantic = new Semantic();
        programa();
        return semantic ;
    }

  final public void programa() throws ParseException {
    jj_consume_token(DO);
    jj_consume_token(THIS);
    jj_consume_token(IDENTIFIER);
                            semantic.Action01(token.image);
    jj_consume_token(OPEN_BRACKET);
    jj_consume_token(CLOSE_BRACKET);
    declaracao();
    corpoDoPrograma();
    comentario();
                                                                                                                                        semantic.Action02(token.image);
  }

  final public void comentario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESCRIPTION:
      jj_consume_token(DESCRIPTION);
      jj_consume_token(LITERAL_CONSTANT);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void declaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
      jj_consume_token(DECLARATION);
      declaracao1();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void declaracao1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      jj_consume_token(OPEN_BRACKET);
      declaracaoDeTipoEnumerado();
      jj_consume_token(CLOSE_BRACKET);
      declaracao2();
      break;
    case CONSTANT:
      declaracaoDeConstantesEVariaveis();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracao2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARATION:
      jj_consume_token(DECLARATION);
      declaracaoDeConstantesEVariaveis();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void declaracaoDeTipoEnumerado() throws ParseException {
    jj_consume_token(IDENTIFIER);
                  semantic.Action03(token.image);
    jj_consume_token(IS);
    listaDeIdentificadoresDeConstantesTipoEnumerado();
    jj_consume_token(DOT);
    declaracaoDeTipoEnumerado1();
  }

  final public void declaracaoDeTipoEnumerado1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      declaracaoDeTipoEnumerado();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void listaDeIdentificadoresDeConstantesTipoEnumerado() throws ParseException {
    jj_consume_token(IDENTIFIER);
                  semantic.Action04(token.image);
    listaDeIdentificadoresDeConstantesTipoEnumerado1();
  }

  final public void listaDeIdentificadoresDeConstantesTipoEnumerado1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      listaDeIdentificadoresDeConstantesTipoEnumerado();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void declaracaoDeConstantesEVariaveis() throws ParseException {
    jj_consume_token(CONSTANT);
    jj_consume_token(AND);
    jj_consume_token(VARIABLE);
    jj_consume_token(OPEN_BRACKET);
    constantesEVariaveis();
    jj_consume_token(CLOSE_BRACKET);
  }

  final public void constantesEVariaveis() throws ParseException {
    jj_consume_token(AS);
    constantesEVariaveis1();
  }

  final public void constantesEVariaveis1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      declaracaoDeConstantes();
      variaveis2();
      break;
    case VARIABLE:
      declaracaoDeVariaveis();
      constantes2();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracaoDeConstantes() throws ParseException {
    jj_consume_token(CONSTANT);
                semantic.Action05();
    constantes();
  }

  final public void constantes() throws ParseException {
    listaDeIdentificadoresDeConstantes();
    jj_consume_token(IS);
    tipo();
    semantic.Action06();
    jj_consume_token(EQUAL);
    valor();
     semantic.Action07(token.image);
    jj_consume_token(DOT);
    constantes1();
  }

  final public void constantes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      constantes();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void constantes2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      declaracaoDeConstantes();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void declaracaoDeVariaveis() throws ParseException {
    jj_consume_token(VARIABLE);
                semantic.Action08(token.image);
    variaveis();
  }

  final public void variaveis() throws ParseException {
    listaDeIdentificadoresDeVariaveis();
    jj_consume_token(IS);
    tipo();
                                                     semantic.Action06();
    jj_consume_token(DOT);
    variaveis1();
  }

  final public void variaveis1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      variaveis();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void variaveis2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      declaracaoDeVariaveis();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void listaDeIdentificadoresDeConstantes() throws ParseException {
    jj_consume_token(IDENTIFIER);
                  semantic.Action09(token.image);
    listaDeIdentificadoresDeConstantes1();
  }

  final public void listaDeIdentificadoresDeConstantes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      listaDeIdentificadoresDeConstantes();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void listaDeIdentificadoresDeVariaveis() throws ParseException {
    jj_consume_token(IDENTIFIER);
                  semantic.Action10(token.image);
    indice();
    semantic.Action11(token.image);
    listaDeIdentificadoresDeVariaveis1();
  }

  final public void listaDeIdentificadoresDeVariaveis1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      listaDeIdentificadoresDeVariaveis();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void indice() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_KEYS:
      jj_consume_token(OPEN_KEYS);
      jj_consume_token(NUMBER_INTEGER);
                                  semantic.Action12(token.image);
      jj_consume_token(CLOSE_KEYS);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
               semantic.Action13();
      break;
    case REAL:
      jj_consume_token(REAL);
                                               semantic.Action14();
      break;
    case STRING:
      jj_consume_token(STRING);
        semantic.Action15();
      break;
    case LOGIC:
      jj_consume_token(LOGIC);
        semantic.Action16();
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
        semantic.Action17();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_INTEGER:
      jj_consume_token(NUMBER_INTEGER);
      break;
    case NUMBER_REAL:
      jj_consume_token(NUMBER_REAL);
      break;
    case LITERAL_CONSTANT:
      jj_consume_token(LITERAL_CONSTANT);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void corpoDoPrograma() throws ParseException {
    jj_consume_token(BODY);
    jj_consume_token(OPEN_BRACKET);
    listaDeComandos();
    jj_consume_token(CLOSE_BRACKET);
  }

  final public void listaDeComandos() throws ParseException {
    comando();
    listaDeComandos1();
  }

  final public void listaDeComandos1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESIGNATE:
    case READ:
    case WRITE:
    case AVALIATE:
    case REPEAT:
      listaDeComandos();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DESIGNATE:
      atribuicao();
      break;
    case READ:
      entrada();
      break;
    case WRITE:
      saida();
      break;
    case AVALIATE:
      selecao();
      break;
    case REPEAT:
      repeticao();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void atribuicao() throws ParseException {
    jj_consume_token(DESIGNATE);
    jj_consume_token(THIS);
                       semantic.Action18();
    listaDeIdentificadoresDeVariaveis();
    jj_consume_token(AS);
    expressao();
                                                                                                   semantic.Action19();
    jj_consume_token(DOT);
  }

  final public void entrada() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(THIS);
                  semantic.Action20();
    jj_consume_token(OPEN_BRACKET);
    listaDeIdentificadoresDeVariaveis();
    jj_consume_token(CLOSE_BRACKET);
    jj_consume_token(DOT);
  }

  final public void saida() throws ParseException {
    jj_consume_token(WRITE);
    saida1();
  }

  final public void saida1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
      jj_consume_token(THIS);
                 semantic.Action21();
      jj_consume_token(OPEN_BRACKET);
      listaDeIdentificadoresEOuConstantes();
      jj_consume_token(CLOSE_BRACKET);
      jj_consume_token(DOT);
      break;
    case THIS:
      jj_consume_token(THIS);
                                                                                                                           semantic.Action22();
      jj_consume_token(OPEN_BRACKET);
      listaDeIdentificadoresEOuConstantes();
      jj_consume_token(CLOSE_BRACKET);
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void listaDeIdentificadoresEOuConstantes() throws ParseException {
    item();
            semantic.Action23();
    listaDeIdentificadoresEOuConstantes1();
  }

  final public void listaDeIdentificadoresEOuConstantes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      listaDeIdentificadoresEOuConstantes();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                  semantic.Action24(token.image);
      indice();
                                                             semantic.Action25(token.image);
      break;
    case NUMBER_INTEGER:
      jj_consume_token(NUMBER_INTEGER);
                                                                                                                  semantic.Action26(token.image);
      break;
    case NUMBER_REAL:
      jj_consume_token(NUMBER_REAL);
                                                                                                                                                                    semantic.Action27(token.image);
      break;
    case LITERAL_CONSTANT:
      jj_consume_token(LITERAL_CONSTANT);
                                                                                                                                                                                                                           semantic.Action28(token.image);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void selecao() throws ParseException {
    jj_consume_token(AVALIATE);
    jj_consume_token(THIS);
    expressao();
    selecao1();
                                             semantic.Action29();
  }

  final public void selecao1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      jj_consume_token(RESULT);
                    semantic.Action30();
      jj_consume_token(OPEN_BRACKET);
      listaDeComandos();
      jj_consume_token(CLOSE_BRACKET);
      falsa();
      jj_consume_token(DOT);
      break;
    case UNTRUE:
      jj_consume_token(UNTRUE);
      jj_consume_token(RESULT);
                                                                                                                             semantic.Action31();
      jj_consume_token(OPEN_BRACKET);
      listaDeComandos();
      jj_consume_token(CLOSE_BRACKET);
      verdadeira();
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void verdadeira() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      jj_consume_token(RESULT);
                     semantic.Action32(token.image);
      jj_consume_token(OPEN_BRACKET);
      listaDeComandos();
      jj_consume_token(CLOSE_BRACKET);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void falsa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNTRUE:
      jj_consume_token(UNTRUE);
      jj_consume_token(RESULT);
                       semantic.Action32(token.image);
      jj_consume_token(OPEN_BRACKET);
      listaDeComandos();
      jj_consume_token(CLOSE_BRACKET);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void repeticao() throws ParseException {
    jj_consume_token(REPEAT);
    jj_consume_token(THIS);
                    semantic.Action33(token.image);
    expressao();
                                                                  semantic.Action34(token.image);
    jj_consume_token(OPEN_BRACKET);
    listaDeComandos();
    jj_consume_token(CLOSE_BRACKET);
                                                                                                                                                     semantic.Action35(token.image);
    jj_consume_token(DOT);
  }

  final public void expressao() throws ParseException {
    expressaoAritmeticaOuLogica();
    expressao1();
  }

  final public void expressao1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case DIFFERENT:
    case LESS:
    case GREATER:
    case LESS_EQUAL:
    case GREATER_EQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        expressaoAritmeticaOuLogica();
                                              semantic.Action36();
        break;
      case DIFFERENT:
        jj_consume_token(DIFFERENT);
        expressaoAritmeticaOuLogica();
                                                                                                                 semantic.Action37();
        break;
      case LESS:
        jj_consume_token(LESS);
        expressaoAritmeticaOuLogica();
                                                                                                                                                                               semantic.Action38();
        break;
      case GREATER:
        jj_consume_token(GREATER);
        expressaoAritmeticaOuLogica();
                                                                                                                                                                                                                                                semantic.Action39();
        break;
      case LESS_EQUAL:
        jj_consume_token(LESS_EQUAL);
        expressaoAritmeticaOuLogica();
                                                                                                                                                                                                                                                                                                                    semantic.Action40();
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
        expressaoAritmeticaOuLogica();
                                                                                                                                                                                                                                                                                                                                                                                           semantic.Action41();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void expressaoAritmeticaOuLogica() throws ParseException {
    termo2();
    menorPrioridade();
  }

  final public void menorPrioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case PIPE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        termo2();
        menorPrioridade();
                                         semantic.Action42();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        termo2();
        menorPrioridade();
                                                                                                     semantic.Action43();
        break;
      case PIPE:
        jj_consume_token(PIPE);
        termo2();
        menorPrioridade();
                                                                                                                                                                semantic.Action44();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  final public void termo2() throws ParseException {
    termo1();
    mediaPrioridade();
  }

  final public void mediaPrioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case DIVIDER:
    case PERCENT:
    case MOD:
    case AMPERSAND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        termo1();
        mediaPrioridade();
                                             semantic.Action45();
        break;
      case DIVIDER:
        jj_consume_token(DIVIDER);
        termo1();
        mediaPrioridade();
                                                                                                           semantic.Action46();
        break;
      case PERCENT:
        jj_consume_token(PERCENT);
        termo1();
        mediaPrioridade();
                                                                                                                                                                         semantic.Action47();
        break;
      case MOD:
        jj_consume_token(MOD);
        termo1();
        mediaPrioridade();
                                                                                                                                                                                                                                   semantic.Action48();
        break;
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        termo1();
        mediaPrioridade();
                                                                                                                                                                                                                                                                                                   semantic.Action49();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void termo1() throws ParseException {
    elemento();
    maiorPrioridade();
  }

  final public void maiorPrioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
      elemento();
      maiorPrioridade();
                                         semantic.Action50();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void elemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                  semantic.Action24(token.image);
      indice();
                                                             semantic.Action51();
      break;
    case NUMBER_INTEGER:
      jj_consume_token(NUMBER_INTEGER);
                                                                                                       semantic.Action26(token.image);
      break;
    case NUMBER_REAL:
      jj_consume_token(NUMBER_REAL);
                                                                                                                                                         semantic.Action27(token.image);
      break;
    case LITERAL_CONSTANT:
      jj_consume_token(LITERAL_CONSTANT);
                                                                                                                                                                                                                semantic.Action28(token.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
                                                                                                                                                                                                                                                           semantic.Action52();
      break;
    case UNTRUE:
      jj_consume_token(UNTRUE);
                                                                                                                                                                                                                                                                                             semantic.Action53();
      break;
    case OPEN_PARENTHESIS:
      jj_consume_token(OPEN_PARENTHESIS);
      expressao();
      jj_consume_token(CLOSE_PARENTHESIS);
      break;
    case EXCLAMATION:
      jj_consume_token(EXCLAMATION);
      jj_consume_token(OPEN_PARENTHESIS);
      expressao();
      jj_consume_token(CLOSE_PARENTHESIS);
                                                                                                                                                                                                                                                                                                                                                                                                                                           semantic.Action54();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x4000,0x48000,0x4000,0x0,0x0,0xc0000,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x1e00000,0x0,0x2e000000,0x2e000000,0x10000800,0x0,0x0,0xc0000000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x4,0x0,0xe0000000,0x2,0x2,0x0,0x400,0xe0000000,0x0,0x0,0x0,0xfc0000,0xfc0000,0x2001800,0x2001800,0x1036000,0x1036000,0x8000,0xe4000040,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[76];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 76; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
